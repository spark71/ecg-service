import base64
from io import StringIO

import altair as alt
import numpy as np
import pandas as pd
import requests
import streamlit as st

from ecg.form_schema import DataBytes

api_host = 'http://127.0.0.1:8000/'
#TODO:
# [+] 1) –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
# 2) –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –æ—Ç–≤–µ–¥–µ–Ω–∏—è–º
# 3) –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
# 5) –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Ç–º–∞
# 6) —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
# 7) –¥–æ–ø –∑–∞–¥–∞—á–∏



st.title('ü´Ä–≠–ö–ì-—Å–µ—Ä–≤–∏—Å')

with st.expander(':arrow_up:–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–∞'):
    st.info('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö. –î–∞–ª–µ–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏–≥–Ω–∞–ª', icon="‚ÑπÔ∏è")
    name = st.text_input("–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
    sr = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (sample rate):", min_value=0, max_value=10000, step=1)
    age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç:", min_value=0, max_value=120, step=1)
    gender = option = st.selectbox("–ü–æ–ª:", ("–ú", "–ñ"))
    height = st.number_input("–†–æ—Å—Ç:", min_value=0, max_value=300, step=1)
    weight = st.number_input("–í–µ—Å:", min_value=0, max_value=300, step=1)
    date = str(st.date_input("–î–∞—Ç–∞:"))
    device = st.text_input("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", type=['txt', 'npy'])
    if uploaded_file:
        file_extension = uploaded_file.name.split('.')[-1]
    else:
        file_extension = None
    file_content = None

    if file_extension == 'txt':
        file_content = np.loadtxt(StringIO(uploaded_file.getvalue().decode('utf-8')), dtype=float)
        bytes_signal = file_content.tobytes()
        base64_bytes = base64.b64encode(bytes_signal)
        base64_string_ecg_values = base64_bytes.decode("utf-8")

    elif file_extension == 'npy':
        file_content = np.load(uploaded_file)
        print("SHAPE: ", file_content.shape)
        bytes_signal = file_content.tobytes()
        base64_bytes = base64.b64encode(bytes_signal)
        base64_string_ecg_values = base64_bytes.decode("utf-8")

    if (file_content is not None) and (file_content.shape == (1000, 12)):
        st.success('–°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.', icon="‚úÖ")
        success = True
    else:
        st.error('–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Ç–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', icon="üö®")
        success = False

if uploaded_file is not None:
    print(uploaded_file)
    print('FILE')
    print(type(uploaded_file.getvalue()))
    print(type(file_content))
    print(file_content, file_content.shape)

if success:
    with st.expander('üìà–ì—Ä–∞—Ñ–∏–∫–∏'):
        # st.markdown('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ–¥–µ–Ω–∏—è.')

        lead_names = ['I', 'II', 'III', 'AVR', 'AVL', 'AVF', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6']

        payload = DataBytes(
            sample_rate=sr,
            name=name,
            gender=gender,
            age=age,
            height=height,
            weight=weight,
            device=device,
            ecg_values=base64_string_ecg_values
        )
        data = payload.json().encode('utf-8')

        add_sig_req = requests.post(api_host + 'add_sig_bytes', data=data)
        st.write(add_sig_req.status_code)
        info_res = requests.get(api_host + 'get_signal_info').json()


        with st.container(height=200, border=True):
            st.markdown("„Ä∞Ô∏è –û—Ç–≤–µ–¥–µ–Ω–∏—è")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                lead1 = st.checkbox('I')
                lead2 = st.checkbox('II')
                lead3 = st.checkbox('III')
            with col2:
                lead_avr = st.checkbox('AVR')
                lead_avl = st.checkbox('AVL')
                lead_avf = st.checkbox('AVF')
            with col3:
                lead_v1 = st.checkbox('V1')
                lead_v2 = st.checkbox('V2')
                lead_v3 = st.checkbox('V3')
            with col4:
                lead_v4 = st.checkbox('V4')
                lead_v5 = st.checkbox('V5')
                lead_v6 = st.checkbox('V6')

            leads_checkboxes = [lead1, lead2, lead3, lead_avr, lead_avl, lead_avf, lead_v1, lead_v2, lead_v3, lead_v4,
                                lead_v5, lead_v6]

        r_peaks_checkbox = st.checkbox('R-–ø–∏–∫–∏')
        r_peaks = info_res['r_peaks']

        def draw_lead(sig_df: pd.DataFrame, lead_name: str) -> st.altair_chart:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Altair
            chart = alt.Chart(sig_df).mark_line().encode(
                x='time',
                y='mV'
            )
            if r_peaks_checkbox:
                vertical_lines = alt.Chart(pd.DataFrame({'time': r_peaks})).mark_rule(color='red').encode(x='time')

                # –°–æ–≤–º–µ—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                combined_chart = (chart + vertical_lines).properties(
                    width=670,  # –∑–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞
                    height=300,  # –∑–∞–¥–∞–µ–º –≤—ã—Å–æ—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞
                    title = {
                        "text": lead_name,
                        "anchor": "middle",
                        "align": "center",
                    }
                )
            else:
                combined_chart = chart.properties(
                    width=670,
                    height=300,
                    title={
                        "text": lead_name,
                        "anchor": "middle",
                        "align": "center",
                    }
                )
            st.altair_chart(combined_chart.interactive())


        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        for i in range(len(leads_checkboxes)):
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω —á–µ–∫–±–æ–∫—Å –æ—Ç–≤–µ–¥–µ–Ω–∏—è
            if leads_checkboxes[i]:
                sig_df = pd.DataFrame({'time': np.arange(len(file_content[:, 0])), 'mV': file_content[:, i]})
                lead_name = lead_names[i]
                draw_lead(sig_df, lead_name)


    with st.expander('üßæ–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—è'):
        st.header('–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ', divider="green")
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ (–í–°–†)")
        st.subheader("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≠–ö–ì")
        api_host = 'http://127.0.0.1:8000/'
        if 'clicked' not in st.session_state:
            st.session_state.clicked = False

        def click_button():
            st.session_state.clicked = True

        st.button('–ó–∞–ø—É—Å–∫', on_click=click_button)
        if st.session_state.clicked:
            st.write('Button clicked!')
            pred_res = requests.get(api_host + 'predict')
            print(pred_res.status_code)
            if pred_res.status_code == 200:
                data = pred_res.json()
                for i in range(len(data['cls_pred'])):
                    st.write(f'{data['cls_pred'][i]} - ' + "{:.2f}%".format(data['cls_probs'][i]*100))

                signal_info_df = pd.DataFrame([list(info_res['time_domain_features'].values())],
                                  columns=list(info_res['time_domain_features'].keys()))
                st.write("–û—Ç—Å—á—ë—Ç—ã R-–ø–∏–∫–æ–≤:", info_res['r_peaks'])
                st.write("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RR-–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:", info_res['nn_intervals'])
                st.dataframe(signal_info_df, hide_index=True)
            else:
                st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")


