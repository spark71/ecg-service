import base64
import os
from io import StringIO
from typing import Optional
import altair as alt
import numpy as np
import pandas as pd
import pdfkit
import requests
import streamlit as st
import torch
from dotenv import load_dotenv
from streamlit import session_state as ss
import vl_convert as vlc
from jinja2 import Environment, select_autoescape, FileSystemLoader
from ecg.form_schema import DataBytes
import sys

load_dotenv()
ROOT_DIR = os.environ.get("ROOT_DIR")
sys.path.append(ROOT_DIR)
from models.preprocess.lead_filter_methods import gan_preprocess, med_filter, check_baseline

api_host = os.environ.get("API_HOST")


#TODO:
# 5) –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Ç–º–∞

st.set_page_config(
    page_title="–≠–ö–ì",
    page_icon="üßä",
)

st.title('ü´Ä–≠–ö–ì-—Å–µ—Ä–≤–∏—Å')

with st.expander(':arrow_up:–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–∞'):
    st.info('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –ø–æ–ª—è –¥–∞–Ω–Ω—ã—Ö. –î–∞–ª–µ–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏–≥–Ω–∞–ª', icon="‚ÑπÔ∏è")
    name = st.text_input("**–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:**")
    sr = st.number_input("**–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (sample rate):**", min_value=0, max_value=10000, step=1)
    age = st.number_input("**–í–æ–∑—Ä–∞—Å—Ç:**", min_value=0, max_value=120, step=1)
    gender = option = st.selectbox("**–ü–æ–ª:**", ("–ú", "–ñ"))
    height = st.number_input("**–†–æ—Å—Ç:**", min_value=0, max_value=300, step=1)
    weight = st.number_input("**–í–µ—Å:**", min_value=0, max_value=300, step=1)
    date = str(st.date_input("**–î–∞—Ç–∞:**"))
    device = st.text_input("**–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:**")
    uploaded_file = st.file_uploader("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:**", type=['txt', 'npy'])
    if uploaded_file:
        file_extension = uploaded_file.name.split('.')[-1]
    else:
        file_extension = None
    file_content = None

    if file_extension == 'txt':
        file_content = np.loadtxt(StringIO(uploaded_file.getvalue().decode('utf-8')), dtype=float)
        bytes_signal = file_content.tobytes()
        base64_bytes = base64.b64encode(bytes_signal)
        base64_string_ecg_values = base64_bytes.decode("utf-8")

    elif file_extension == 'npy':
        file_content = np.load(uploaded_file)
        print("SHAPE: ", file_content.shape)
        bytes_signal = file_content.tobytes()
        base64_bytes = base64.b64encode(bytes_signal)
        base64_string_ecg_values = base64_bytes.decode("utf-8")

    if (file_content is not None) and (file_content.shape == (1000, 12)):
        st.success('–°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.', icon="‚úÖ")
        success = True
    else:
        st.error('–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Ç–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', icon="üö®")
        success = False

if uploaded_file is not None:
    # print(uploaded_file)
    print('FILE')
    # print(type(uploaded_file.getvalue()))
    # print(type(file_content))
    # print(file_content, file_content.shape)

if success:
    with st.expander('üìà–ì—Ä–∞—Ñ–∏–∫–∏'):
        lead_names = ['I', 'II', 'III', 'AVR', 'AVL', 'AVF', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6']

        payload = DataBytes(
            sample_rate=sr,
            name=name,
            gender=gender,
            age=age,
            height=height,
            weight=weight,
            device=device,
            ecg_values=base64_string_ecg_values
        )
        data = payload.json().encode('utf-8')

        add_sig_req = requests.post(api_host + 'add_sig_bytes', data=data)
        # st.write("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞: ", add_sig_req.status_code)
        info_res = requests.get(api_host + 'get_signal_info').json()
        with st.container(height=200, border=True):
            st.markdown("**„Ä∞Ô∏è –û—Ç–≤–µ–¥–µ–Ω–∏—è**")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                lead1 = st.checkbox('I', key='cb1')
                lead2 = st.checkbox('II', key='cb2')
                lead3 = st.checkbox('III', key='cb3')
            with col2:
                lead_avr = st.checkbox('AVR', key='cb4')
                lead_avl = st.checkbox('AVL', key='cb5')
                lead_avf = st.checkbox('AVF', key='cb6')
            with col3:
                lead_v1 = st.checkbox('V1', key='cb7')
                lead_v2 = st.checkbox('V2', key='cb8')
                lead_v3 = st.checkbox('V3', key='cb9')
            with col4:
                lead_v4 = st.checkbox('V4', key='cb10')
                lead_v5 = st.checkbox('V5', key='cb11')
                lead_v6 = st.checkbox('V6', key='cb12')


            leads_checkboxes = [lead1, lead2, lead3, lead_avr, lead_avl, lead_avf, lead_v1, lead_v2, lead_v3, lead_v4,
                                lead_v5, lead_v6]

        def change_cb():
            if not all_leads_tumbler:
                ss.cb1 = True
                ss.cb2 = True
                ss.cb3 = True
                ss.cb4 = True
                ss.cb5 = True
                ss.cb6 = True
                ss.cb7 = True
                ss.cb8 = True
                ss.cb9 = True
                ss.cb10 = True
                ss.cb11 = True
                ss.cb12 = True
            else:
                ss.cb1 = False
                ss.cb2 = False
                ss.cb3 = False
                ss.cb4 = False
                ss.cb5 = False
                ss.cb6 = False
                ss.cb7 = False
                ss.cb8 = False
                ss.cb9 = False
                ss.cb10 = False
                ss.cb11 = False
                ss.cb12 = False

        all_leads_tumbler = st.toggle("–í—Å–µ –æ—Ç–≤–µ–¥–µ–Ω–∏—è", on_change=change_cb)
        r_peaks_checkbox = st.checkbox('R-–ø–∏–∫–∏')

        filter_options = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é",
            ["original", "median", "gan", "cycle_ganx2", "cycle_ganx3", "cycle_ganx4"],
            ["original"]
        )
        # st.write("**–§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**", filter_options)
        r_peaks = info_res['r_peaks']
        def draw_lead(sig_df: pd.DataFrame, lead_name: str, filter_options: Optional[dict]=None) -> st.altair_chart:
            sig_df['time, sec'] = sig_df.index / 100
            baseline_warning = '–ù–∞ –¥–∞–Ω–Ω–æ–º –æ—Ç–≤–µ–¥–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä–µ–π—Ñ'
            for option in filter_options:
                if 'median' in option:
                    sig_df['mV'] = med_filter(torch.tensor(sig_df['mV'].values))
                if 'gan' in option:
                    sig_df['mV'] = gan_preprocess(torch.tensor(sig_df['mV'].values), inference_count=1)
                if 'ganx' in option:
                    sig_df['mV'] = gan_preprocess(torch.tensor(sig_df['mV'].values), inference_count=int(option[-1]))

            filter_options_title = ' + '.join(filter_options)
            if len(filter_options_title) != 0:
                filter_options_title = ' (' + filter_options_title + ')'
            print(sig_df)
            chart = alt.Chart(sig_df).mark_line().encode(
                x='time, sec:Q',
                y='mV'
            )
            if r_peaks_checkbox:
                vertical_lines = alt.Chart(pd.DataFrame({'R': np.array(r_peaks)/100})).mark_rule(color='red').encode(x='R')
                # –°–æ–≤–º–µ—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                combined_chart = (chart + vertical_lines).properties(
                    width=670,  # –∑–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞
                    height=300,  # –∑–∞–¥–∞–µ–º –≤—ã—Å–æ—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞
                    title = {
                        "text": lead_name + filter_options_title,
                        "anchor": "middle",
                        "align": "center",
                    }
                )
            else:
                combined_chart = chart.properties(
                    width=670,
                    height=300,
                    title={
                        "text": lead_name + filter_options_title,
                        "anchor": "middle",
                        "align": "center",
                    }
                )
            with st.container(border=True):
                if check_baseline(sig_df['mV'].values):
                    st.warning(baseline_warning, icon='üö®')
                st.altair_chart(combined_chart.interactive(), use_container_width=True)
                print('chart saved')
                png_data = vlc.vegalite_to_png(combined_chart.to_json(), scale=2)
                # print(combined_chart.to_json())
                with open(f"static/{lead_name}.png", "wb") as f:
                    f.write(png_data)


        leads_to_report = []
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        for i in range(len(leads_checkboxes)):
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω —á–µ–∫–±–æ–∫—Å –æ—Ç–≤–µ–¥–µ–Ω–∏—è
            if leads_checkboxes[i]:
                sig_df = pd.DataFrame({'time': np.arange(len(file_content[:, 0])), 'mV': file_content[:, i]})
                lead_name = lead_names[i]
                draw_lead(sig_df, lead_name, filter_options)
                leads_to_report.append(lead_name)
        leads_to_report = list(map(lambda x: fr'{os.path.abspath('static')}\{x}.png', leads_to_report))


    # with st.expander('üßæ–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—è'):
    with st.container(border=True):
        st.header('üßæ–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—è', divider="green")
        st.subheader("1. –í–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ (–í–°–†)")

        signal_info_df = pd.DataFrame([list(info_res['time_domain_features'].values())],
                                      columns=list(info_res['time_domain_features'].keys()))
        with st.expander("üîªR-–ø–∏–∫–∏"):
            st.write("–û—Ç—Å—á—ë—Ç—ã R-–ø–∏–∫–æ–≤:", info_res['r_peaks'])
            st.write("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RR-–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:", info_res['nn_intervals'])
        st.dataframe(signal_info_df, hide_index=True)
        rhythm_statement = ''
        model_rhytm_hrv = st.selectbox(
            "–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è **—Ä–∏—Ç–º–∞** –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–†:",
            ("LGBMClassifier", "LinearSVC"),
            index=None,
            placeholder="–ú–æ–¥–µ–ª—å",
        )

        if model_rhytm_hrv is not None:
            gender_to_int = (lambda x: 1 if x == 'M' else 0)(gender)
            print("GENDER", gender_to_int)
            pred_rhytm_hrv = requests.get(api_host + f'predict_rhythm_by/{model_rhytm_hrv}/age={age}/gender={gender_to_int}')
            print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞: ", pred_rhytm_hrv.status_code)
            if pred_rhytm_hrv.status_code == 200:
                data = pred_rhytm_hrv.json()
                # st.write(data)
                if data == "–°–∏–Ω—É—Å–æ–≤—ã–π —Ä–∏—Ç–º":
                    rhythm_statement = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: <b>{data}</b>. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
                    print(rhythm_statement)
                else:
                    rhythm_statement = f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: <b>{data}</b>. –Ø–≤–ª—è–µ—Ç—Å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –æ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –Ω–æ—Ä–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–º–æ—Ç—Ä –ª–µ—á–∞—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'
                st.markdown(f':blue-background[**{data}**]')
            else:
                st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")
        diagnosis_statement = ''
        model_diagnosis_hrv = st.selectbox(
            "–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è **–¥–∏–∞–≥–Ω–æ–∑–∞** –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–†:",
            ("LGBMClassifier", "LSTM"),
            index=None,
            placeholder="–ú–æ–¥–µ–ª—å",
        )




        if model_diagnosis_hrv is not None:
            gender_to_int = (lambda x: 1 if x == 'M' else 0)(gender)
            pred_diagnosis_hrv = requests.get(api_host + f'predict_diagnostic_by/{model_diagnosis_hrv}/age={age}/gender={gender_to_int}')
            print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞: ", pred_diagnosis_hrv.status_code)
            if pred_diagnosis_hrv.status_code == 200:
                data = pred_diagnosis_hrv.json()
                # st.write(data)
                if data == "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≠–ö–ì":
                    diagnosis_statement = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: <b>{data}</b>. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
                else:
                    diagnosis_statement = f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: <b>{data}</b>. –Ø–≤–ª—è–µ—Ç—Å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –æ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –Ω–æ—Ä–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–º–æ—Ç—Ä –ª–µ—á–∞—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'
                st.markdown(f':blue-background[**{data}**]')
            else:
                st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")



        st.subheader("2. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≠–ö–ì")
        if 'clicked' not in st.session_state:
            st.session_state.clicked = False

        def click_button():
            st.session_state.clicked = True

        model_option = st.selectbox(
            "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:",
            ("resnet1d", "inception1d", "vgg16"),
            index=None,
            placeholder="–ú–æ–¥–µ–ª—å",
        )
        st.write("–í –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–∞: ", f'`{model_option}`')

        if model_option:
            st.button("üïπÔ∏è–ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", on_click=click_button, disabled=False)
        else:
            st.button("üïπÔ∏è–ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", on_click=click_button, disabled=True)


        clsf_statement = ''
        if st.session_state.clicked:
            pred_res = requests.get(api_host + f'predict_by/{model_option}')
            print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞: ", pred_res.status_code)
            if pred_res.status_code == 200:
                data = pred_res.json()
                class_description = {
                    "NORM": "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≠–ö–°",
                    "STTC": "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ ST-—Å–µ–≥–º–µ–Ω—Ç–µ",
                    "HYP": "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è",
                    "CD": "–ù–∞—Ä—É—à–µ–Ω–∏e –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏"
                }
                for i in range(len(data['cls_pred'])):
                    descr = class_description[data['cls_pred'][i]]
                    statement_md = f'**{data['cls_pred'][i]} ({descr})** - ' + "{:.2f}%".format(data['cls_probs'][i]*100)
                    statement_html = f'<b>{data['cls_pred'][i]} ({descr})</b>. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - ' + "{:.2f}%".format(data['cls_probs'][i]*100) + '<br>'
                    clsf_statement += statement_html
                    st.write(statement_md)
                clsf_statement += "<text style='color:Tomato;'>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ª–µ—á–∞—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞.</text>"
            else:
                st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª")

            env = Environment(loader=FileSystemLoader("templates"), autoescape=select_autoescape())
            template = env.get_template("report.html")
            html = template.render(
                name=name,
                age=age,
                sample_rate=sr,
                gender=gender,
                date=date,
                height=height,
                weight=weight,
                device=device,
                leads_images=leads_to_report,
                hrv_rhythm_statement=rhythm_statement,
                hrv_diagnosis_statement=diagnosis_statement,
                main_clsf_statement=clsf_statement
            )
            config = pdfkit.configuration(wkhtmltopdf=r"C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe")
            options = {
                "enable-local-file-access": True,
            }
            pdf = pdfkit.from_string(html, False, configuration=config, options=options)
            st.info("–í –æ—Ç—á—ë—Ç–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ–¥–µ–Ω–∏—è", icon="‚ÑπÔ∏è")
            download_pdf_btn = st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF-–æ—Ç—á—ë—Ç",
                data=pdf,
                file_name=f"report_{name.lower()}.pdf",
                mime="application/octet-stream",
            )

